type Query {
  getYoutubeVideoSearch(videoId: String): YoutubePlaylistItems!
  getYoutubePlaylistItems(playlistId: String): YoutubePlaylistItems!
  getYoutubePlaylist(nextPageToken: String): YoutubePlayList!
  getYoutubeCaptionlist(videoId: String): YoutubeCaptionList!
  downloadYoutubeCaption(videoId: String, tlang: String, trackKind: String, name: String): YoutubeCaptionDownload!
  getTakenoteSeries(user:Int,start:Int,count:Int): [TakeNoteSeries]
  getTakenoteSermon(seriesId:String,user:Int):[TakeNoteSermon]
  getTakenoteSermonVerses(sermondId:String):TakeNoteSermonVerses
  getTakenoteLocations:[TakeNoteLocations]
  getTakenoteNotes(sermonId:String,noteType:String):TakeNoteNotes
  F1ListGroupTypes:F1ListGroupTypes @function(name:"F1ListGroupTypes")
  F1ListGroups(itemId:String):F1ListGroups @function(name:"F1ListGroups")
}
type F1ListGroups{
  groups:F1ListGroup
}
type F1ListGroup{
  group:[F1ListGroup2]
}
type F1ListGroup2{
  id:String
  name:String
  description:String
  startDate:String
  expirationDate:String
  isOpen:String
  isPublic:String
  hasChildcare:String
  isSearchable:String
  gender:F1ListGroup2Gender
  maritalStatus:F1ListGroup2MaritalStatus
  startAgeRange:String
  endAgeRange:String
}
type F1ListGroup2MaritalStatus{
   name:String
}
type F1ListGroup2Gender{
 name:String
}
type F1ListGroupTypes{
  groupTypes:F1ListGroupType
}
type F1ListGroupType{
  groupType:[F1ListGroupType2]
}
type F1ListGroupType2{
  id:String
  name:String
  description:String
  isWebEnabled:String
  isSearchable:String
}
type TakeNoteNotes{
  homeChurchNotes:[TakeNoteNote]
  sermonNotes:[TakeNoteNote]
  sermonVerses:[TakeNoteVerse]
  homeChurchVerses:[TakeNoteVerse]
}
type TakeNoteNote{
  id:Int
  noteType:String
  content:String
  position:Int
  timecode:String
  sermons_FK:String
}
type TakeNoteVerse{
  id:String
  chapterVerse:String
  translation:String
  content:String
  sermons_FK:Int
  notes_FK:String
}
type TakeNoteLocationGPS{
  longitude:Float,
  latitude:Float
}
type TakeNoteLocations{
    _id:String,
    id:String,
    name:String,
    categories:[String],
    location:TakeNoteLocationGPS,
    state:String
}
type TakeNoteSermonVerses{
    sermonVerses:[TakeNoteVerses]
}
type TakeNoteVerses{
  id:String,
  chapterVerse:String,
  translation:String,
  content:String,
  sermons_FK:String,
  notes_FK:String
}
type TakeNoteSeries{
  id:String,
  title:String,
  description:String,
  imageUrl:String,
  public:Int,
  thumbnail:String,
  startDate:String,
  endDate:String,
  sermonCommentCount:Int,
  homeChurchCommentCount:Int
}
type TakeNoteMediaEntry{
  id:String,
  type:String,
  contentType:String,
  kind:String,
  label:String,
  url:String
}
type TakeNoteSermon{
  id:String,
  title:String,
  speaker:String,
  deliveryDate:String,
  description:String,
  audioUrl:String,
  mediaEntries:[TakeNoteMediaEntry],
  public:Int,
  series_FK:String,
  sermonNoteCount:Int,
  quoteNoteCount:Int,
  homeChurchNoteCount:Int,
  sermonCommentCount:Int
}


type TNSeries
@model
@key(fields:["id"])
 @key(name: "BySeriesIdent", fields: ["TNident"], queryField:"getTNSeriesByIdent")

{
  id:ID!
  TNident:String,
  title:String,
  description:String,
  imageUrl:String,
  public:Int,
  thumbnail:String,
  startDate:String,
  endDate:String,
  sermonCommentCount:Int,
  homeChurchCommentCount:Int
  sermons:[TNSermon] @connection(name: "SeriesSermons")
}

type TNMediaEntry{
  type:String,
  contentType:String,
  kind:String,
  label:String,
  url:String
}

type TNSermon
@model
@key(fields:["id"])
 @key(name: "BySermonIdent", fields: ["TNident"], queryField:"getTNSermonByIdent")

{
  id:ID!
  TNident:String,
  title:String,
  speaker:String,
  deliveryDate:String,
  description:String,
  audioUrl:String,
  mediaEntries:[TNMediaEntry],
  public:Int,
  series_FK:String,
  series:TNSeries @connection(name: "SeriesSermons")
  sermonNoteCount:Int,
  quoteNoteCount:Int,
  homeChurchNoteCount:Int,
  sermonCommentCount:Int

}
type YoutubeCaptionDownload{
  transcript:YoutubeCaptionText
}
type YoutubeCaptionText{
  text:[YoutubeCaptionDetails]
} 
type YoutubeCaptionDetails{
  dur:Float
  start:Float
  content:String
}
type YoutubeCaptionList{

   kind: String
  etag: String
  items: [YoutubeCaptionItem]
}
type YoutubeCaptionItem{
  kind:String
  etag:String
  id:String
  snippet:YoutubeCaptionSnippet
}
type YoutubeCaptionSnippet{
  videoId:String
  lastUpdated:String
  trackKind:String
  language:String
  name:String
  audioTrackType:String
  isCC:String
  isLarge:String
  isEasyReader:String
  isDraft:String
  isAutoSynced:String
  status:String
}

type YoutubePlaylistItems{
  kind: String
  etag: String
  pageInfo: YoutubePageInfo
  items: [YoutubePlaylistItemsItem]
}
type YoutubePlaylistItemsItem
 { 
  id: ID
  kind: String
  etag: String
  snippet: YoutubeSnippet
  contentDetails: YoutubePlaylistItemDetails
  status: YoutubeStatus
}
type YoutubePlaylistItemsItem2
 { 
  id: ID
  kind: String
  etag: String
  snippet: YoutubeSnippet
  contentDetails: YoutubePlaylistItemDetails
  status: YoutubeStatus
}
type YoutubePlaylistItemDetails{
  videoId: String
  videoPublishedAt: String
  duration: String
  dimension: String
  definition: String
  caption: String
  licensedContent: Boolean,
  projection: String
} 
type YoutubeStatus{
  uploadStatus: String
  privacyStatus: String
  license: String
  embeddable: Boolean
  publicStatsViewable: Boolean
}
type YoutubePageInfo
{
  totalResults: Int
  resultsPerPage: Int
}

type YoutubeThumbnails
{
  default: YoutubeThumbnail
  medium: YoutubeThumbnail
  high: YoutubeThumbnail
  standard: YoutubeThumbnail
  maxres: YoutubeThumbnail
}
type YoutubeLocalized
{
  title: String
  description: String
}
type YoutubeThumbnail
{
  url: String
  width: Int
  height: Int
}
type YoutubeSnippet
{
  publishedAt: String
  channelId: String
  title: String
  description: String
  thumbnails: YoutubeThumbnails
  channelTitle: String
  localized: YoutubeLocalized
}
type YoutubePlayListItem 
{  
  kind: String
  etag: String
  id: String
  snippet: YoutubeSnippet
}
type YoutubePlayList
{
  kind: String
  etag: String
  nextPageToken: String
  pageInfo: YoutubePageInfo
  items: [YoutubePlayListItem]
}

type Resource
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["ResourceAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
}
type Speaker
 @model
 @auth(rules:[{allow:public, operations:[read]}])

{
   id:ID!
   name:String
   image:String
   videos:[SpeakerVideos] @connection(name: "SpeakerVideos")
}
type SpeakerVideos
  @model
 @auth(rules:[{allow:public, operations:[read]}])

{
  id:ID!
  video:Video @connection(name: "VideosSpeaker")
  speaker:Speaker @connection(name: "SpeakerVideos")
}
type Series
  @model
 @auth(rules:[{allow:public, operations:[read]}])
 @key(name: "BySeriesTypes",fields: ["seriesType","startDate"], queryField:"getSeriesBySeriesType")

{
  id: ID!
  videos: [Video] @connection(name: "VideosSeries")
  seriesType: String
  title: String
  description: String
  image: String
  startDate: String
  endDate: String
}
type Video 
 @model 
 @searchable
 @key(name: "ByYoutubeIdent", fields: ["YoutubeIdent"], queryField:"getVideoByYoutubeIdent")
 @key(name: "ByVideoTypes",fields: ["videoTypes","publishedDate"], queryField:"getVideoByVideoType")
 @auth(rules:[{allow:public, operations:[read]}])

{
  id: ID!
  createdBy: String
  createdDate: String
  locations:[Location]
  speakers:[SpeakerVideos] @connection(name: "VideosSpeaker")
  episodeTitle:String
  originalEpisodeTitle:String
  episodeNumber:Int
  seriesTitle:String
  series:Series  @connection(name: "VideosSeries")
  publishedDate:String
  recordedDate:String
  description:String
  closedCaptioning:[String]
  referencedMedia:[String]
  campaigns:[String]
  bibleVerses:[String]
  topics:[String]
  qandeh:[String]
  length:String
  YoutubeIdent:String!
  Youtube:YoutubePlaylistItemsItem2
  videoTypes:String
}


type Blog
 @model 
 @searchable
 @versioned
  @auth(rules: [
      {allow: groups, groups: ["BlogAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  title:String
  content:String
}
type News
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["NewsAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  title:String
  content:String
  startDate:String
  endDate:String
}
type Event
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["EventAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  startTime:String
  endTime:String
  title:String
  description:String
}

enum Status{
  enabled
  disabled
}
interface Cohort {
  id: ID
  canJoin: Boolean
  visibleToNonMembers: Boolean
  status:Status
  name: String
  admin: [User]
  members: [User]
}
type Group implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  canJoin: Boolean
  visibleToNonMembers: Boolean
  status:Status
  name: String
  admin: [User]
  members: [User]
  type: String
}
type Organization implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])    
{
  id: ID
  canJoin: Boolean!
  visibleToNonMembers: Boolean!
  status:Status!
  name: String!
  admin: [User!]
  members: [Staff!]
  location: String
  address: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  sites:[Location!]
}
type LocationGPS{
  longitude: Float
  latitude: Float
  address: String  
}
type Location 
  @model 
 @auth(rules:[{allow:public, operations:[read]}])

{
  id: String
  url: String
  site_name: String
  directions:String
  welcome: String
  welcome_img: String
  welcome_vid_youtube: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String    
  location: LocationGPS
  visible: Boolean
}
interface User{
  sub: String
  title: String
  name: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  status: String
}
type Staff implements User
  @model 
  @searchable
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  sub: String!
  title: String!
  name: String!
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  status: String!
  
}



type Region 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  name: String!
  status: Status!
  sites: [Location!]
}

