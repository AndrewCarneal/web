type Query {
  getYoutubePlaylistItems(playlistId: String): YoutubePlaylistItems!
  getYoutubePlaylist(nextPageToken: String): YoutubePlayList!
  getYoutubeCaptionlist(videoId: String): YoutubeCaptionList!
  downloadYoutubeCaption(videoId: String, tlang: String, trackKind: String, name: String): YoutubeCaptionDownload!
  getTakenoteSeries(user:Int,start:Int,count:Int): [TakeNoteSeries]
  getTakenoteSermon(seriesId:Int,user:Int):[TakeNoteSermon]
  getTakenoteSermonVerses(sermondId:Int):TakeNoteSermonVerses
  getTakenoteLocations:[TakeNoteLocations]
}
type TakeNoteLocationGPS{
  longitude:Float,
  latitude:Float
}
type TakeNoteLocations{
    _id:String,
    id:String,
    name:String,
    categories:[String],
    location:TakeNoteLocationGPS,
    state:String
}
type TakeNoteSermonVerses{
    sermonVerses:[TakeNoteVerses]
}
type TakeNoteVerses{
  id:String,
  chapterVerse:String,
  translation:String,
  content:String,
  sermons_FK:String,
  notes_FK:String
}
type TakeNoteSeries{
  id:String,
  title:String,
  description:String,
  imageUrl:String,
  public:Int,
  thumbnail:String,
  startDate:String,
  endDate:String,
  sermonCommentCount:Int,
  homeChurchCommentCount:Int
}
type TakeNoteMediaEntry{
  id:String,
  type:String,
  contentType:String,
  kind:String,
  label:String,
  url:String
}
type TakeNoteSermon{
  id:String,
  title:String,
  speaker:String,
  deliveryDate:String,
  description:String,
  audioUrl:String,
  mediaEntries:[TakeNoteMediaEntry],
  public:Int,
  series_FK:String,
  sermonNoteCount:Int,
  homeChurchNoteCount:Int

}
type YoutubeCaptionDownload{
  transcript:YoutubeCaptionText
}
type YoutubeCaptionText{
  text:[YoutubeCaptionDetails]
} 
type YoutubeCaptionDetails{
  dur:Float
  start:Float
  content:String
}
type YoutubeCaptionList{

   kind: String
  etag: String
  items: [YoutubeCaptionItem]
}
type YoutubeCaptionItem{
  kind:String
  etag:String
  id:String
  snippet:YoutubeCaptionSnippet
}
type YoutubeCaptionSnippet{
  videoId:String
  lastUpdated:String
  trackKind:String
  language:String
  name:String
  audioTrackType:String
  isCC:String
  isLarge:String
  isEasyReader:String
  isDraft:String
  isAutoSynced:String
  status:String
}

type YoutubePlaylistItems{
  kind: String
  etag: String
  pageInfo: YoutubePageInfo
  items: [YoutubePlaylistItemsItem]
}
type YoutubePlaylistItemsItem
 { 
  id: ID
  kind: String
  etag: String
  snippet: YoutubeSnippet
  contentDetails: YoutubePlaylistItemDetails
  
}
type YoutubePlaylistItemsItem2
 { 
  id: ID
  kind: String
  etag: String
  snippet: YoutubeSnippet
  contentDetails: YoutubePlaylistItemDetails
  
}
type YoutubePlaylistItemDetails{
  videoId: String
  videoPublishedAt: String
} 
type YoutubePageInfo
{
  totalResults: Int
  resultsPerPage: Int
}

type YoutubeThumbnails
{
  default: YoutubeThumbnail
  medium: YoutubeThumbnail
  high: YoutubeThumbnail
  standard: YoutubeThumbnail
  maxres: YoutubeThumbnail
}
type YoutubeLocalized
{
  title: String
  description: String
}
type YoutubeThumbnail
{
  url: String
  width: Int
  height: Int
}
type YoutubeSnippet
{
  publishedAt: String
  channelId: String
  title: String
  description: String
  thumbnails: YoutubeThumbnails
  channelTitle: String
  localized: YoutubeLocalized
}
type YoutubePlayListItem 
{  
  kind: String
  etag: String
  id: String
  snippet: YoutubeSnippet
}
type YoutubePlayList
{
  kind: String
  etag: String
  nextPageToken: String
  pageInfo: YoutubePageInfo
  items: [YoutubePlayListItem]
}

type Resource
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["ResourceAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
}

type Video 
 @model 
 @searchable
{
  id: ID
  createdBy: String
  createdDate: String
  locations:[Location]
  episodeTitle:String
  episodeNumber:Int
  seriesTitle:String
  publishedDate:String
  recordedDate:String
  description:String
  closedCaptioning:[String]
  referencedMedia:[String]
  campaigns:[String]
  bibleVerses:[String]
  topics:[String]
  qandeh:[String]
  length:String
  YoutubeIdent:String
  Youtube:YoutubePlaylistItemsItem2
  videoTypes:[String]
}


type Blog
 @model 
 @searchable
 @versioned
  @auth(rules: [
      {allow: groups, groups: ["BlogAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  title:String
  content:String
}
type News
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["NewsAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  title:String
  content:String
  startDate:String
  endDate:String
}
type Event
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["EventAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  startTime:String
  endTime:String
  title:String
  description:String
}

enum Status{
  enabled
  disabled
}
interface Cohort {
  id: ID
  canJoin: Boolean
  visibleToNonMembers: Boolean
  status:Status
  name: String
  admin: [User]
  members: [User]
}
type Group implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  canJoin: Boolean
  visibleToNonMembers: Boolean
  status:Status
  name: String
  admin: [User]
  members: [User]
  type: String
}
type Organization implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])    
{
  id: ID
  canJoin: Boolean!
  visibleToNonMembers: Boolean!
  status:Status!
  name: String!
  admin: [User!]
  members: [Staff!]
  location: String
  address: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  sites:[Location!]
}
type Location implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])

    
{
  id: ID
  canJoin: Boolean
  visibleToNonMembers: Boolean
  status:Status
  name: String
  admin: [User]
  members: [Staff]
  location: String
  address: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
}
interface User{
  sub: String
  title: String
  name: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  status: String
}
type Staff implements User
  @model 
  @searchable
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  sub: String!
  title: String!
  name: String!
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  status: String!
  
}


type Region 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID
  name: String!
  status: Status!
  sites: [Location!]
}

