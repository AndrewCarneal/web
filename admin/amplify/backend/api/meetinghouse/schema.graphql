type Query {
  getYoutubePlaylist: [YoutubePlayList!]!
}
type YoutubePageInfo
{
  totalResults: Int
  resultsPerPage: Int
}
type YoutubeThumbnails
{
  default: YoutubeThumbnail
  medium: YoutubeThumbnail
  high: YoutubeThumbnail
  standard: YoutubeThumbnail
  maxres: YoutubeThumbnail
}
type YoutubeLocalized
{
  title: String
  description: String
}
type YoutubeThumbnail
{
  url: String
  width: Int
  height: Int
}
type YoutubeSnippet
{
  publishedAt: String
  channelId: String
  title: String
  description: String
  thumbnails: YoutubeThumbnails
  channelTitle: String
  localized: YoutubeLocalized
}
type YoutubePlayListItem 
{  
  kind: String
  etag: String
  id: String
  snippet: YoutubeSnippet
}
type YoutubePlayList
{
  kind: String
  etag: String
  nextPageToken: String
  pageInfo: YoutubePageInfo
  items: [YoutubePlayListItem]
}

type Resource
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["ResourceAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
}

type Video 
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["VideoAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  title:String
  decription:String
  length:String
}


type Blog
 @model 
 @searchable
 @versioned
  @auth(rules: [
      {allow: groups, groups: ["BlogAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  title:String
  content:String
}
type News
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["NewsAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  title:String
  content:String
  startDate:String
  endDate:String
}
type Event
 @model 
 @searchable
  @auth(rules: [
      {allow: groups, groups: ["EventAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  createdBy: String
  createdDate: String
  postedDate: String
  locations:[Location]
  startTime:String
  endTime:String
  title:String
  description:String
}

enum Status{
  enabled
  disabled
}
interface Cohort {
  id: ID!
  canJoin: Boolean!
  visibleToNonMembers: Boolean!
  status:Status!
  name: String!
  admin: [User!]
  members: [User!]
}
type Group implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  canJoin: Boolean!
  visibleToNonMembers: Boolean!
  status:Status!
  name: String!
  admin: [User!]
  members: [User!]
  type: String!
}
type Organization implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])    
{
  id: ID!
  canJoin: Boolean!
  visibleToNonMembers: Boolean!
  status:Status!
  name: String!
  admin: [User!]
  members: [Staff!]
  location: String
  address: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  sites:[Location!]
}
type Location implements Cohort
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])

    
{
  id: ID!
  canJoin: Boolean!
  visibleToNonMembers: Boolean!
  status:Status!
  name: String!
  admin: [User!]
  members: [Staff!]
  location: String
  address: String
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
}
interface User{
  sub: String!
  title: String!
  name: String!
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  status: String!
}
type Staff implements User
  @model 
  @searchable
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  sub: String!
  title: String!
  name: String!
  phone: String
  email: String
  instagram: String
  twitter: String
  facebook: String
  website: String
  status: String!
  
}


type Region 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["SiteAdmin"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Everyone"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  name: String!
  status: Status!
  sites: [Location!]
}

